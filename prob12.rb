## DONE!!!
#The sequence of triangle numbers is generated by adding the natural numbers. 
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#
#What is the value of the first triangle number to have over five hundred divisors?
#https://projecteuler.net/problem=12
#
#76576500 ANS
#Around 12 to 14 seconds of execution

#require 'byebug'

start = Time.now

def triangle(div)
  (1..100000).each do |n|
    #SUMMATION ALGO
    tri_term = (n * (n + 1) )/ 2  
    if divisors(tri_term) > div
      return tri_term
    end
  end
end

def divisors(num)
  return 1 if num == 1
  div_arr = []
  (1..Math.sqrt(num)).each do |e|
    if (num % e == 0) && !(div_arr.include?(e))
      div_arr << e
      div_arr << num / e
    end
  end
  div_arr.count
end
  
puts triangle(500)

puts Time.now - start

#INEFFICIENT 30 mins or more
=begin
def triangle(div)
  (1..100000).reduce(0) do |acc,e|
    num = acc
    if divisors(num) > div
      puts "done"
      return num
    end
    acc + e
  end
end

def divisors(num)
  div_arr = []
  (1..num).each do |e|
    div_arr << e  if num % e == 0
  end
  p div_arr
  div_arr.count
end
=end
